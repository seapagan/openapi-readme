[project]
name = "openapi-readme"
version = "0.4.0"
description = "Generate Markdown from an openapi JSON file."
authors = [{ name = "Grant Ramsay", email = "grant@gnramsay.com" }]
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"


classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Text Processing :: Markup :: Markdown",
]
dependencies = ["single-source>=0.4.0", "typer>=0.12.5"]

[project.urls]
"repository" = "https://github.com/seapagan/openapi-readme"
"homepage" = "https://github.com/seapagan/openapi-readme"
"Pull Requests" = "https://github.com/seapagan/openapi-readme/pulls"
"Bug Tracker" = "https://github.com/seapagan/openapi-readme/issues"
"Changelog" = "https://github.com/seapagan/openapi-readme/blob/main/CHANGELOG.md"

[project.scripts]
openapi-readme = "openapi_readme.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["openapi_readme"]


[tool.uv]
dev-dependencies = [
  "mock>=5.1.0",
  "mypy>=1.13.0",
  "pytest>=8.3.3",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
  "pytest-randomly>=3.16.0",
  "pytest-reverse>=1.8.0",
  "pytest-sugar>=1.0.0",
  "pytest-watcher>=0.4.3",
  "ruff>=0.7.2",
  "pre-commit>=4.0.1",
  "pymarkdownlnt>=0.9.24",
  "faker>=30.8.2",
  "greenlet>=3.1.1",
  "pyfakefs>=5.7.1",
  "pytest-xdist>=3.6.1",
  "github-changelog-md>=0.9.5",
  "poethepoet>=0.29.0",
]


[tool.poe.tasks]
# setup 'PoeThePoet' tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy openapi_readme/**/*.py tests/**/*.py --strict"
mypy.help = "Run mypy checks"
format.cmd = "ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "ruff check ."
ruff.help = "Run Ruff checks"
markdown.cmd = "pymarkdown scan  -r openapi_readme/**/[!CHANGELOG,!.github/]*.md docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

# testing with pytest
test.cmd = "pytest"
test.help = "Run all tests (pytest)"
"test:watch".cmd = "ptw . --now --clear"
"test:watch".help = "Run tests using Pytest in watch mode"

# Generate a CHANGELOG.md
changelog.cmd = "github-changelog-md -r openapi-readme"
changelog.help = "Generate a CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false
extensions.front-matter.enabled = true

[tool.ruff]
line-length = 80
src = ["openapi_readme"]
target-version = "py39"  # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us üòù
extend-ignore = ["COM812", "ISC001"] # these are ignored for ruff formatting

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files
  "ARG002", # often fixtures are not used in test files but need to be there
]
"openapi_readme/main.py" = [
  "UP007",
  "PLR0913",
] # These cause issues in Typer Apps

[tool.ruff.lint.isort]
known-first-party = ["openapi_readme"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

# Options for pytest and coverage
[tool.pytest.ini_options]
addopts = ["--cov", "--cov-report", "term-missing", "--cov-report", "html"]
filterwarnings = []
mock_use_standalone_module = true
markers = ["e2e: mark a test as an end-to-end test."]

[tool.coverage.run]
omit = ["*/tests/*", "openapi_readme/tree/*"]
source = ["openapi_readme"]

[tool.coverage.report]
show_missing = true

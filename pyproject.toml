[tool.poetry]
name = "openapi-readme"
version = "0.3.0"
description = "Generate Markdown from an openapi JSON file."
authors = ["Grant Ramsay <grant@gnramsay.com>"]
readme = "README.md"
packages = [{ include = "openapi_readme" }]
license = "MIT"
repository = "https://github.com/seapagan/openapi-readme"
homepage = "https://github.com/seapagan/openapi-readme"

classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Text Processing :: Markup :: Markdown",
]

[tool.poetry.urls]
"Pull Requests" = "https://github.com/seapagan/openapi-readme/pulls"
"Bug Tracker" = "https://github.com/seapagan/openapi-readme/issues"
"Changelog" = "https://github.com/seapagan/openapi-readme/blob/main/CHANGELOG.md"

[tool.poetry.scripts]
openapi-readme = "openapi_readme.main:app"

[tool.poetry.dependencies]
python = "^3.9,<4.0"
typer = { extras = ["all"], version = ">=0.6.1,<0.13.0" }
single-source = "^0.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Configure dev dependencies
[tool.poetry.group.dev.dependencies]
# linting, type-checking and security checks
mypy = "^1.8.0"
pre-commit = "^3.6.2"
pymarkdownlnt = "^0.9.12"
ruff = ">=0.3,<0.5"

# testing
faker = ">=23.3.0"
greenlet = "^3.0.3"
mock = "^5.1.0"
pyfakefs = "^5.3.5"
pytest = "^8.1.0"
pytest-cov = ">=4.1,<6.0"
pytest-xdist = "^3.5.0"
pytest-sugar = ">=1.0.0"
pytest-randomly = "^3.15.0"
pytest-reverse = "^1.7.0"
pytest-mock = "^3.12.0"
pytest-watcher = "^0.4.1"

# documentation
github-changelog-md = "^0.9.1"

# assorted utilities
poethepoet = ">=0.25.0"

[tool.poe.tasks]
# setup 'PoeThePoet' tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy openapi_readme/**/*.py tests/**/*.py --strict"
mypy.help = "Run mypy checks"
format.cmd = "ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "ruff check ."
ruff.help = "Run Ruff checks"
markdown.cmd = "pymarkdown scan  -r openapi_readme/**/[!CHANGELOG,!.github/]*.md docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

# testing with pytest
test.cmd = "pytest"
test.help = "Run all tests (pytest)"
"test:watch".cmd = "ptw . --now --clear"
"test:watch".help = "Run tests using Pytest in watch mode"

# Generate a CHANGELOG.md
changelog.cmd = "github-changelog-md -r openapi-readme"
changelog.help = "Generate a CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false
extensions.front-matter.enabled = true

[tool.ruff]
line-length = 80
src = ["openapi_readme"]
target-version = "py39"  # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us üòù
extend-ignore = ["COM812", "ISC001"] # these are ignored for ruff formatting

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files
  "ARG002", # often fixtures are not used in test files but need to be there
]
"openapi_readme/main.py" = [
  "UP007",
  "PLR0913",
] # These cause issues in Typer Apps

[tool.ruff.lint.isort]
known-first-party = ["openapi_readme"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

# Options for pytest and coverage
[tool.pytest.ini_options]
addopts = ["--cov", "--cov-report", "term-missing", "--cov-report", "html"]
filterwarnings = []
mock_use_standalone_module = true
markers = ["e2e: mark a test as an end-to-end test."]

[tool.coverage.run]
omit = ["*/tests/*", "openapi_readme/tree/*"]
source = ["openapi_readme"]

[tool.coverage.report]
show_missing = true
